name: change-version-guard
description: Guard - Update version if source files have changed

inputs:
  fail_task:
    description: fail task if version was not updated
    default: 'true'
    required: false
  package_json_path:
    description: path to package.json file
    default: 'package.json'
    required: false
  source_path:
    description: path to source folder
    required: false

runs:
  using: composite
  steps:
    - name: Get changed source files
      id: changed-source
      if: ${{ inputs.source_path }}
      uses: tj-actions/changed-files@v29

    - name: Get new version
      id: get-new-version
      shell: bash
      env:
        PACKAGE_JSON_PATH: ${{ inputs.package_json_path }}
      run: |
        echo $PACKAGE_JSON_PATH
        versionDiff=$( git diff HEAD^ HEAD -U0 package.json )
        
        if ! [[ $versionDiff ]] || ! [[ $versionDiff =~ (\+ *\"version\":) ]]
        then
          echo "::set-output name=changed::false"
          echo "::set-output name=version::undefined"
        else
          newVersion=$(echo $versionDiff | grep -oP "\+ *\"version\":.+," | grep -oP "\d+\.\d+.\d+(-beta\.\d+)?")
          
          echo "::set-output name=changed::true"
          echo "::set-output name=version::$newVersion"
        fi

    - name: Check changes
      id: detection
      shell: bash
      if: ${{ contains(steps.changed-source.outputs.all_changed_files, inputs.source_path) &&
        steps.get-new-version.outputs.changed != 'true' && inputs.fail_task == 'true' }}
      run: |
        echo "Please, update version in ${{ inputs.package_json_path }}"
        exit 1

outputs:
  changed:
    description: true if version was bumped
    value: ${{ steps.get-new-version.outputs.changed }}
  version:
    description: new version
    value: ${{ steps.get-new-version.outputs.version }}
